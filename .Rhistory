## repeat for PA
pa=cov[cov$state=="Pennsylvania",]
## chester
cco=pa[which(pa$county=="Chester"),]
ggplot(cco,
aes(dates,cases,group=county,colour=county))+
geom_path()+
geom_point()+
scale_colour_viridis_d(end=0.9)+
#scale_y_continuous(trans="log10")+
labs(x="date",y="COVID-19 cases")+
theme_bw()+
theme(panel.grid.major=element_blank(),panel.grid.minor=element_blank())+
theme(legend.position = "top")+
theme(axis.title.x=element_text(margin=margin(t=10,r=0,b=0,l=0)))+
theme(axis.title.y=element_text(margin=margin(t=0,r=10,b=0,l=0)))
ggplot(cco,
aes(dates,cases,group=county,colour=county))+
geom_path()+
geom_point()+
scale_colour_viridis_d(end=0.9)+
scale_y_continuous(trans="log10")+
labs(x="date",y="COVID-19 cases")+
theme_bw()+
theme(panel.grid.major=element_blank(),panel.grid.minor=element_blank())+
theme(legend.position = "top")+
theme(axis.title.x=element_text(margin=margin(t=10,r=0,b=0,l=0)))+
theme(axis.title.y=element_text(margin=margin(t=0,r=10,b=0,l=0)))
## deaths
ggplot(cco,
aes(dates,deaths,group=county,colour=county))+
geom_path()+
geom_point()+
scale_colour_viridis_d(end=0.9)+
#scale_y_continuous(trans="log10")+
labs(x="date",y="COVID-19 deaths")+
theme_bw()+
theme(panel.grid.major=element_blank(),panel.grid.minor=element_blank())+
theme(legend.position = "top")+
theme(axis.title.x=element_text(margin=margin(t=10,r=0,b=0,l=0)))+
theme(axis.title.y=element_text(margin=margin(t=0,r=10,b=0,l=0)))
## growth
mod=lm(lcases~yday,data=moc)
log(2)/coef(mod)["yday"]
## pa
mod=lm(lcases~yday,data=cco)
log(2)/coef(mod)["yday"]
## clean environment & plots
rm(list=ls())
graphics.off()
## library
library(gsheet)
library(plyr)
library(ggplot2)
library(car)
library(visreg)
library(rotl)
library(ape)
library(phytools)
## clean environment & plots
rm(list=ls())
graphics.off()
## library
library(gsheet)
library(plyr)
library(ggplot2)
library(car)
library(visreg)
library(rotl)
library(ape)
library(phytools)
library(ggtree)
library(phylofactor)
## load data
url="https://docs.google.com/spreadsheets/d/1ZbdOCDtuUwIc4wtUZugVlWfZVW7B7CcrSCZt3JqrwHU/edit?usp=sharing"
data=gsheet2tbl(url,sheetid=1)
data=data.frame(data)
rm(url)
## save old names
data$old_names=data$host_species
## fix species names
sort(unique(data$host_species))
data$host_species=revalue(data$host_species,
c("Miniopterus schreibersii"="Miniopterus schreibersii schreibersii",
"Acinonys jubatus"="Acinonyx jubatus",
"Herpailurus yaguaroundi"="Herpailurus yagouaroundi",
"Clyomis laticeps"="Clyomys bishopi",
"Monodelpyis domestica"="Monodelphis domestica",
"Puma yaguaroundi"="Herpailurus yagouaroundi",
"Cerdocyon brachyurus"="Chrysocyon brachyurus",
"Panthera unica"="Panthera uncia",
"Sapajus apella."="Sapajus apella",
"Panthera pardus padus"="Panthera pardus",
"Ozotocerus bezoarticus"="Ozotoceros bezoarticus",
"Mycromis minutus"="Micromys minutus",
"Proechimys gr.cuvieri"="Proechimys cuvieri",
"Calomys cerqueirae"="Calomys cerqueirai",
"Oecomys gr. bicolor"="Oecomys bicolor",
"Oxymycterus dasythricus"="Oxymycterus dasytrichus",
"Thrichomy fosteri"="Thrichomys fosteri",
"Thricomys fosteri"="Thrichomys fosteri",
"Mus domesticus"="Mus musculus",
"Nyctereutes procyonoides viverrinus"="Nyctereutes procyonoides",
"Panthera pardus saxicolor"="Panthera pardus",
"Panthera tigris tigris"="Panthera tigris"))
## get species genus
x=strsplit(data$host_species," ")
data$genus=sapply(x,function(x) x[1])
rm(x)
View(data)
## character
data$genus=as.character(data$genus)
## get phylo by genus
#phy=tnrs_match_names(names=data$host_species,context_name="Animals",do_approximate_matching=F)
phy=rotl::tnrs_match_names(names=data$genus,context_name="Animals",do_approximate_matching=F)
## make phy into database
phy=data.frame(phy)
## order
phy=phy[order(phy$ott_id),]
## merge
data$search_string=tolower(data$host_species)
data$search_string=tolower(data$genus)
data=merge(data,phy,by="search_string",all.x=T)
## clean
rm(phy)
## trim
data=data[!is.na(data$ott_id),]
is.na(data$host_positive)
table(is.na(data$host_positive))
table(is.na(data$sample_size))
## remove if no sample
data=data[!is.na(data$sample_size),]
data=data[!is.na(data$host_positive),]
## aggregate to host and country
data2=aggregate(sample_size~ott_id+unique_name+country+wild_captive+
#Primers+Mycoplasma_species+detect_target+detect_method+host_tissue+
order+study_title+search_string,data=data,sum)
data3=aggregate(host_positive~ott_id+unique_name+country+wild_captive+
#Primers+Mycoplasma_species+detect_target+detect_method+host_tissue+
order+study_title+search_string,data=data,sum)
## combine
rdata=data.frame(data2,data3[c("host_positive")])
## save raw
raw=data
rm(data2,data3)
## rename
data=rdata
data$prevalence=data$host_positive/data$sample_size
rm(rdata)
## logit prevalence
library(metafor)
data=data.frame(data,escalc(xi=data$host_positive,ni=data$sample_size,measure="PLO"))
## back transform
data$invlogit=transf.ilogit(data$yi)
## geography
unique(data$country)
data$geo=revalue(data$country,
c("Brazil"="Latin America",
"Belize"="Latin America",
"Chile"="Latin America",
"Canada"="North America",
"France"="Europe",
"Japan"="Asia",
"Namibia"="Africa",
"Nigeria"="Africa",
"Slovakia"="Europe",
"Spain"="Europe",
"Switzerland"="Europe",
"Tanzania"="Africa",
"Thailand"="Asia",
"United States"="North America",
"USA"="North America",
"Colombia"="Latin America",
"Argentina"="Latin America",
"Hungary"="Europe",
"Iran"="Middle East",
"Korea"="Asia",
"French Guyana"="Latin America",
"Germany"="Europe",
'Italy'='Europe',
'Peru'='Latin America'))
unique(data$geo)
table(data$geo)
## repeat
data$geo2=revalue(data$geo,c("Europe"="Eurasia",
"Middle East"="Eurasia"))
table(data$geo2)
## geo3
data$geo3=revalue(data$geo,c("Australia"="Asia"))
table(data$geo3)
## geo3
data$geo3=revalue(data$geo,c("Australia"="Asia",
'Middle East'='Africa'))
table(data$geo3)
## save old
old=data
## with species
data=data[!is.na(data$unique_name),]
## phylogeny
tree=tol_induced_subtree(ott_ids=unique(data$ott_id))
## trim
data=data[-which(data$ott_id%in%c('3614178')),]
## phylogeny
tree=tol_induced_subtree(ott_ids=unique(data$ott_id))
## remove ott information from the tips
tree$tip.label=strip_ott_ids(tree$tip.label)
## check binary
is.binary.tree(tree)
## resolve multifurcations
tree=multi2di(tree)
is.binary.tree(tree)
## check ultrametric
is.ultrametric(tree)
## assign branch lengths
tree=compute.brlen(tree,method="Grafen")
is.ultrametric(tree)
## ladderize tree
tree=ladderize(tree)
## make label
tree=makeLabel(tree)
## plot
par(oma=c(0,0,0,0),mar=c(0,0,0,0),mfrow=c(1,1))
plot(tree,cex=0.75,show.tip.label=T)
tree$tip.label
## make tip labels
data$label=data$unique_name
## does label match tips?
table(data$label%in%tree$tip.label)
## fix missing names
data$label=factor(data$label)
levels(data$label)[!levels(data$label)%in%tree$tip.label]
data$label
levels(data$label)[!levels(data$label)%in%tree$tip.label]
levels(data$label)
## fix both
strsplit(data$unique_name,' ')
## fix both
sapply(strsplit(data$unique_name,' '),function(x) x[1])
## fix both
data$unique_name=sapply(strsplit(data$unique_name,' '),function(x) x[1])
tree$tip.label=sapply(strsplit(tree$tip.label,' '),function(x) x[1])
## make tip labels
data$label=data$unique_name
## does label match tips?
table(data$label%in%tree$tip.label)
## make tip labels
data$label=data$unique_name
data$label=factor(data$label)
## does label match tips?
table(data$label%in%tree$tip.label)
## fix missing names
levels(data$label)[!levels(data$label)%in%tree$tip.label]
## fix missing names
setdiff(data$label,tree$tip.label)
unique(data$label)
sort(unique(data$label))
## fix missing names
setdiff(data$label,tree$tip.label)
setdiff(tree$tip.label,data$label)
## fix
tree$tip.label=sapply(strsplit(tree$tip.label,'_'),function(x) x[1])
tree$tip.label
## make tip labels
data$label=data$unique_name
data$label=factor(data$label)
## does label match tips?
table(data$label%in%tree$tip.label)
## fix missing names
setdiff(tree$tip.label,data$label)
10^0
10^0.5
## clean environment & plots
rm(list=ls())
graphics.off()
## packages
library(ape)
library(phylofactor)
library(tidyverse)
library(data.table)
library(ggtree)
library(plyr)
## load new data
setwd("~/Desktop")
data=read.delim("virionette.txt",sep=',')
data=data[which(data$host_order=='Chiroptera'),]
data=data[which(data$virus_genus=='Betacoronavirus'),]
## aggregate
data$betacov=1
data=aggregate(betacov~tree,data=data,sum)
data$betacov=ifelse(data$betacov>0,1,0)
## load bat supertree
setwd("~/Desktop/clean_betacov/clean data")
btree=readRDS('bat-supertree_clean.rds')
## make data
tdata=data.frame(tree=btree$tip.label)
## merge betacov
bdata=merge(tdata,data,by='tree',all.x=T)
bdata$betacov=replace_na(bdata$betacov,0)
## clean
rm(data,tdata)
## get genus
bdata$genus=sapply(strsplit(as.character(bdata$tree),'_'),function(x) x[1])
## load taxonomy
setwd("~/Desktop/becker-betacov")
taxa=read.csv('bat taxonomy.csv',header=T)
taxa$X=NULL
taxa$hOrder=NULL
names(taxa)=c('family','genus')
## merge into bdata
bdata=merge(bdata,taxa,by='genus',all.x=T)
rm(taxa)
## fix missing families
bdata$family=as.character(bdata$family)
bdata$family2=revalue(bdata$genus,
c('Aproteles'='Pteropodidae',
'Paracoelops'='Hipposideridae'))
bdata$family=ifelse(is.na(bdata$family),bdata$family2,bdata$family)
bdata$family2=NULL
## taxa
bdata$taxonomy=with(bdata,paste(family,genus,tree,sep='; '))
## merge into phylogeny order
bdata=bdata[match(btree$tip.label,bdata$tree),]
## merge with caper
library(caper)
cdata=comparative.data(phy=btree,data=bdata,names.col=tree,vcv=T,na.omit=F,warn.dropped=T)
## clean environment & plots
rm(list=ls())
graphics.off()
## packages
library(ape)
library(phylofactor)
library(tidyverse)
library(data.table)
library(ggtree)
library(plyr)
## load new data
setwd("~/Desktop")
data=read.delim("virionette.txt",sep=',')
data=data[which(data$host_order=='Chiroptera'),]
data=data[which(data$virus_genus=='Betacoronavirus'),]
## aggregate
data$betacov=1
data=aggregate(betacov~tree,data=data,sum)
data$betacov=ifelse(data$betacov>0,1,0)
data$betacov
## load bat supertree
setwd("~/Desktop/clean_betacov/clean data")
btree=readRDS('bat-supertree_clean.rds')
## make data
tdata=data.frame(tree=btree$tip.label)
## merge betacov
bdata=merge(tdata,data,by='tree',all.x=T)
bdata$betacov=replace_na(bdata$betacov,0)
## clean
rm(data,tdata)
## get genus
bdata$genus=sapply(strsplit(as.character(bdata$tree),'_'),function(x) x[1])
## load taxonomy
setwd("~/Desktop/becker-betacov")
taxa=read.csv('bat taxonomy.csv',header=T)
taxa$X=NULL
taxa$hOrder=NULL
names(taxa)=c('family','genus')
## merge into bdata
bdata=merge(bdata,taxa,by='genus',all.x=T)
rm(taxa)
## fix missing families
bdata$family=as.character(bdata$family)
bdata$family2=revalue(bdata$genus,
c('Aproteles'='Pteropodidae',
'Paracoelops'='Hipposideridae'))
bdata$family=ifelse(is.na(bdata$family),bdata$family2,bdata$family)
bdata$family2=NULL
## taxa
bdata$taxonomy=with(bdata,paste(family,genus,tree,sep='; '))
## merge into phylogeny order
bdata=bdata[match(btree$tip.label,bdata$tree),]
## merge with caper
library(caper)
cdata=comparative.data(phy=btree,data=bdata,names.col=tree,vcv=T,na.omit=F,warn.dropped=T)
## add correct names
cdata$data$tree=rownames(cdata$data)
cdata$data$Species=rownames(cdata$data)
nrow(cdata$data)
## Holm rejection procedure
HolmProcedure <- function(pf,FWER=0.05){
if (pf$models[[1]]$family$family%in%c('gaussian',"Gamma","quasipoisson")){
pvals <- sapply(pf$models,FUN=function(fit) summary(fit)$coefficients['phyloS','Pr(>|t|)'])
} else {
pvals <- sapply(pf$models,FUN=function(fit) summary(fit)$coefficients['phyloS','Pr(>|z|)'])
}
D <- length(pf$tree$tip.label)
## this is the line for Holm's sequentially rejective cutoff
keepers <- pvals<=(FWER/(2*D-3 - 2*(0:(pf$nfactors-1))))
if (!all(keepers)){
nfactors <- min(which(!keepers))-1
} else {
nfactors <- pf$nfactors
}
return(nfactors)
}
## get species in a clade
cladeget=function(pf,factor){
spp=pf$tree$tip.label[pf$groups[[factor]][[1]]]
return(spp)
}
## set taxonomy
taxonomy=data.frame(cdata$data$taxonomy)
names(taxonomy)="taxonomy"
taxonomy$Species=rownames(cdata$data)
taxonomy=taxonomy[c("Species","taxonomy")]
taxonomy$taxonomy=as.character(taxonomy$taxonomy)
## gpf
set.seed(1)
pf=gpf(Data=cdata$data,tree=cdata$phy,
frmla.phylo=betacov~phylo,
family=binomial,algorithm='phylo',nfactors=1)
cdata$data$betacov
is.na(cdata$data$betacov)
table(is.na(cdata$data$betacov))
## clean environment & plots
rm(list=ls())
graphics.off()
## packages
library(ape)
library(phylofactor)
library(tidyverse)
library(data.table)
library(ggtree)
library(plyr)
## load new data
setwd("~/Desktop")
data=read.delim("virionette.txt",sep=',')
data=data[which(data$host_order=='Chiroptera'),]
data=data[which(data$virus_genus=='Betacoronavirus'),]
data=data.frame(data)
## aggregate
data$betacov=1
data=aggregate(betacov~tree,data=data,sum)
data$betacov=ifelse(data$betacov>0,1,0)
## load bat supertree
setwd("~/Desktop/clean_betacov/clean data")
btree=readRDS('bat-supertree_clean.rds')
## make data
tdata=data.frame(tree=btree$tip.label)
## merge betacov
bdata=merge(tdata,data,by='tree',all.x=T)
bdata$betacov=replace_na(bdata$betacov,0)
class(bdata)
## clean
rm(data,tdata)
## get genus
bdata$genus=sapply(strsplit(as.character(bdata$tree),'_'),function(x) x[1])
## load taxonomy
setwd("~/Desktop/becker-betacov")
taxa=read.csv('bat taxonomy.csv',header=T)
taxa$X=NULL
taxa$hOrder=NULL
names(taxa)=c('family','genus')
## merge into bdata
bdata=merge(bdata,taxa,by='genus',all.x=T)
rm(taxa)
## fix missing families
bdata$family=as.character(bdata$family)
bdata$family2=revalue(bdata$genus,
c('Aproteles'='Pteropodidae',
'Paracoelops'='Hipposideridae'))
bdata$family=ifelse(is.na(bdata$family),bdata$family2,bdata$family)
bdata$family2=NULL
## taxa
bdata$taxonomy=with(bdata,paste(family,genus,tree,sep='; '))
## merge into phylogeny order
bdata=bdata[match(btree$tip.label,bdata$tree),]
## merge with caper
library(caper)
cdata=comparative.data(phy=btree,data=bdata,names.col=tree,vcv=T,na.omit=F,warn.dropped=T)
## add correct names
cdata$data$tree=rownames(cdata$data)
cdata$data$Species=rownames(cdata$data)
## Holm rejection procedure
HolmProcedure <- function(pf,FWER=0.05){
if (pf$models[[1]]$family$family%in%c('gaussian',"Gamma","quasipoisson")){
pvals <- sapply(pf$models,FUN=function(fit) summary(fit)$coefficients['phyloS','Pr(>|t|)'])
} else {
pvals <- sapply(pf$models,FUN=function(fit) summary(fit)$coefficients['phyloS','Pr(>|z|)'])
}
D <- length(pf$tree$tip.label)
## this is the line for Holm's sequentially rejective cutoff
keepers <- pvals<=(FWER/(2*D-3 - 2*(0:(pf$nfactors-1))))
if (!all(keepers)){
nfactors <- min(which(!keepers))-1
} else {
nfactors <- pf$nfactors
}
return(nfactors)
}
## get species in a clade
cladeget=function(pf,factor){
spp=pf$tree$tip.label[pf$groups[[factor]][[1]]]
return(spp)
}
## set taxonomy
taxonomy=data.frame(cdata$data$taxonomy)
names(taxonomy)="taxonomy"
taxonomy$Species=rownames(cdata$data)
taxonomy=taxonomy[c("Species","taxonomy")]
taxonomy$taxonomy=as.character(taxonomy$taxonomy)
## gpf
set.seed(1)
pf=gpf(Data=cdata$data,tree=cdata$phy,
frmla.phylo=betacov~phylo,
family=binomial,algorithm='phylo',nfactors=1)
